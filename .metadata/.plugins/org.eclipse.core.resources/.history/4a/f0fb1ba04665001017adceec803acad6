package com.aurionpro.GuitarApp.Solution.test;

import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;

import com.aurionpro.GuitarApp.Solution.model.Builder;
import com.aurionpro.GuitarApp.Solution.model.Guitar;
import com.aurionpro.GuitarApp.Solution.model.GuitarSpecs;
import com.aurionpro.GuitarApp.Solution.model.Inventory;
import com.aurionpro.GuitarApp.Solution.model.Type;
import com.aurionpro.GuitarApp.Solution.model.Wood;

public class FindGuitarUsingScanner {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        Inventory inventory = new Inventory();
        initializeInventory(inventory);

        boolean continueSearch = true;

        while (continueSearch) {
            Builder builder = null;
            while (builder == null) {
                try {
                    System.out.println("Enter Guitar Builder (FENDER, GIBSON, MARTIN, COLLINGS, OLSON, RYAN, PRS, ANY): ");
                    String builderInput = sc.nextLine().toUpperCase();
                    builder = Builder.valueOf(builderInput);
                    
                    // Check if this builder exists in inventory (skip check for ANY)
                    if (!builderInput.equals("ANY") && !builderExistsInInventory(inventory, builder)) {
                        System.out.println("\nSorry! We don't have any guitars from " + builder + " in our inventory.");
                        System.out.println("Available builders: " + getAvailableBuilders(inventory));
                        
                        String choice = askForAlternative(sc, "Would you like to see guitars from other builders? (yes/no): ");
                        if (choice.equals("no")) {
                            continueSearch = false;
                            System.out.println("Thank you for using Guitar Finder!");
                            break;
                        }
                        builder = null; // Reset to ask again
                    }
                } catch (IllegalArgumentException e) {
                    System.out.println("Invalid input! Please enter correct spelling for Builder.");
                }
            }
            
            if (!continueSearch) break;

            System.out.println("Enter Guitar Model: ");
            String model = sc.nextLine();
            
            // Check if this model exists for the selected builder (skip if builder is ANY)
            if (!builder.toString().equals("ANY") && !modelExistsForBuilder(inventory, builder, model)) {
                System.out.println("\nSorry! We don't have model '" + model + "' from " + builder + " in our inventory.");
                System.out.println("Available models from " + builder + ": " + getAvailableModelsForBuilder(inventory, builder));
                
                String choice = askForAlternative(sc, "Would you like to see other models or change builder? (yes/no): ");
                if (choice.equals("no")) {
                    continueSearch = false;
                    System.out.println("Thank you for using Guitar Finder!");
                    break;
                } else {
                    continue; // Start over
                }
            } else if (builder.toString().equals("ANY") && !modelExistsInInventory(inventory, model)) {
                System.out.println("\nSorry! We don't have model '" + model + "' in our inventory.");
                System.out.println("Available models: " + getAllAvailableModels(inventory));
                
                String choice = askForAlternative(sc, "Would you like to see other models or change specifications? (yes/no): ");
                if (choice.equals("no")) {
                    continueSearch = false;
                    System.out.println("Thank you for using Guitar Finder!");
                    break;
                } else {
                    continue; // Start over
                }
            }

            Type type = null;
            while (type == null) {
                try {
                    System.out.println("Enter Guitar Type (ACOUSTIC, ELECTRIC): ");
                    String typeInput = sc.nextLine().toUpperCase();
                    type = Type.valueOf(typeInput);
                    
                    // Check if this type exists for the selected builder and model
                    if (!builder.toString().equals("ANY")) {
                        if (!typeExistsForBuilderAndModel(inventory, builder, model, type)) {
                            System.out.println("\nSorry! We don't have " + type + " type for " + builder + " " + model + " in our inventory.");
                            System.out.println("Available types for " + builder + " " + model + ": " + getAvailableTypesForBuilderAndModel(inventory, builder, model));
                            
                            String choice = askForAlternative(sc, "Would you like to see other types or start over? (yes/no): ");
                            if (choice.equals("no")) {
                                continueSearch = false;
                                System.out.println("Thank you for using Guitar Finder!");
                                break;
                            } else {
                                type = null; // Reset to ask again
                            }
                        }
                    } else {
                        // For ANY builder, check if type exists for the model across all builders
                        if (!typeExistsForModel(inventory, model, type)) {
                            System.out.println("\nSorry! We don't have " + type + " type for model '" + model + "' in our inventory.");
                            System.out.println("Available types for model '" + model + "': " + getAvailableTypesForModel(inventory, model));
                            
                            String choice = askForAlternative(sc, "Would you like to see other types or start over? (yes/no): ");
                            if (choice.equals("no")) {
                                continueSearch = false;
                                System.out.println("Thank you for using Guitar Finder!");
                                break;
                            } else {
                                type = null; // Reset to ask again
                            }
                        }
                    }
                } catch (IllegalArgumentException e) {
                    System.out.println("Invalid input! Please enter correct spelling for Type.");
                }
            }
            
            if (!continueSearch) break;

            int numStrings = 0;
            while (numStrings <= 0) {
                try {
                    System.out.println("Enter Number of Strings (positive integer): ");
                    numStrings = Integer.parseInt(sc.nextLine());
                    if (numStrings <= 0) {
                        System.out.println("Number of strings must be positive.");
                    } else {
                        // Check if this number of strings exists for current selection
                        if (!stringsExistForSelection(inventory, builder, model, type, numStrings)) {
                            System.out.println("\nSorry! We don't have " + numStrings + " strings for " + builder + " " + model + " " + type + " in our inventory.");
                            System.out.println("Available string counts: " + getAvailableStringsForSelection(inventory, builder, model, type));
                            
                            String choice = askForAlternative(sc, "Would you like to try different string count or start over? (yes/no): ");
                            if (choice.equals("no")) {
                                continueSearch = false;
                                System.out.println("Thank you for using Guitar Finder!");
                                break;
                            } else {
                                numStrings = 0; // Reset to ask again
                            }
                        }
                    }
                } catch (NumberFormatException e) {
                    System.out.println("Invalid input! Please enter a valid number.");
                }
            }
            
            if (!continueSearch) break;

            Wood backWood = null;
            while (backWood == null) {
                try {
                    System.out.println("Enter Back Wood (INDIAN_ROSEWOOD, BRAZILIAN_ROSEWOOD, MAHOGANY, MAPLE, COCOBOLO, CEDAR, ADIRONDACK, ALDER, SITKA): ");
                    String backWoodInput = sc.nextLine().toUpperCase();
                    backWood = Wood.valueOf(backWoodInput);
                } catch (IllegalArgumentException e) {
                    System.out.println("Invalid input! Please enter correct spelling for Back Wood.");
                }
            }

            Wood topWood = null;
            while (topWood == null) {
                try {
                    System.out.println("Enter Top Wood (INDIAN_ROSEWOOD, BRAZILIAN_ROSEWOOD, MAHOGANY, MAPLE, COCOBOLO, CEDAR, ADIRONDACK, ALDER, SITKA): ");
                    String topWoodInput = sc.nextLine().toUpperCase();
                    topWood = Wood.valueOf(topWoodInput);
                } catch (IllegalArgumentException e) {
                    System.out.println("Invalid input! Please enter correct spelling for Top Wood.");
                }
            }

            GuitarSpecs userChoice = new GuitarSpecs(builder, model, type, numStrings, backWood, topWood);
            List<Guitar> matchingGuitars = inventory.search(userChoice);

            if (matchingGuitars.isEmpty()) {
                System.out.println("\nSorry! We don't have any guitar matching your exact wood specifications.");
                System.out.println("But we have these similar guitars with different wood combinations:");
                
                // Show alternatives with same builder, model, type, strings but different wood
                GuitarSpecs relaxedSpecs = new GuitarSpecs(builder, model, type, numStrings, null, null);
                List<Guitar> alternatives = inventory.search(relaxedSpecs);
                
                if (!alternatives.isEmpty()) {
                    for (Guitar guitar : alternatives) {
                        GuitarSpecs specs = guitar.getSpecs();
                        System.out.println("\n" + specs.getBuilder() + " " + specs.getModel() + " "
                                + specs.getType() + " guitar:\n   " + specs.getBackwood() + " back and sides,\n   "
                                + specs.getTopwood() + " top, " + specs.getNumStrings() + " strings\n   Price: ₹" + guitar.getPrice());
                    }
                }
                
                String choice = askForAlternative(sc, "\nWould you like to search again? (yes/no): ");
                if (choice.equals("no")) {
                    continueSearch = false;
                    System.out.println("Thank you for using Guitar Finder!");
                }
            } else {
                System.out.println("\nGreat! We found matching guitars:");
                for (Guitar guitar : matchingGuitars) {
                    GuitarSpecs specs = guitar.getSpecs();
                    System.out.println("\nWe have a " + specs.getBuilder() + " " + specs.getModel() + " "
                            + specs.getType() + " guitar:\n" + specs.getBackwood() + " back and sides,\n"
                            + specs.getTopwood() + " top.\nYou can have it for only ₹" + guitar.getPrice() + "!\n-----");
                }
                
                String choice = askForAlternative(sc, "\nDo you want to search more? (yes/no): ");
                if (choice.equals("no")) {
                    continueSearch = false;
                    System.out.println("Thank you for using Guitar Finder!");
                }
            }
        }

        sc.close();
    }
    
    private static String askForAlternative(Scanner sc, String question) {
        String choice = "";
        while (true) {
            System.out.println(question);
            choice = sc.nextLine().trim().toLowerCase();
            if (choice.equals("yes") || choice.equals("no")) {
                return choice;
            } else {
                System.out.println("Invalid input! Please type 'yes' or 'no'.");
            }
        }
    }
    
    private static boolean builderExistsInInventory(Inventory inventory, Builder builder) {
        GuitarSpecs specs = new GuitarSpecs(builder, null, null, 0, null, null);
        List<Guitar> guitars = inventory.search(specs);
        return !guitars.isEmpty();
    }
    
    private static boolean modelExistsForBuilder(Inventory inventory, Builder builder, String model) {
        GuitarSpecs specs = new GuitarSpecs(builder, model, null, 0, null, null);
        List<Guitar> guitars = inventory.search(specs);
        return !guitars.isEmpty();
    }
    
    private static boolean modelExistsInInventory(Inventory inventory, String model) {
        // Search for model across all builders
        GuitarSpecs specs = new GuitarSpecs(null, model, null, 0, null, null);
        List<Guitar> guitars = inventory.search(specs);
        return !guitars.isEmpty();
    }
    
    private static boolean typeExistsForBuilderAndModel(Inventory inventory, Builder builder, String model, Type type) {
        GuitarSpecs specs = new GuitarSpecs(builder, model, type, 0, null, null);
        List<Guitar> guitars = inventory.search(specs);
        return !guitars.isEmpty();
    }
    
    private static boolean typeExistsForModel(Inventory inventory, String model, Type type) {
        GuitarSpecs specs = new GuitarSpecs(null, model, type, 0, null, null);
        List<Guitar> guitars = inventory.search(specs);
        return !guitars.isEmpty();
    }
    
    private static boolean stringsExistForSelection(Inventory inventory, Builder builder, String model, Type type, int numStrings) {
        GuitarSpecs specs;
        if (builder.toString().equals("ANY")) {
            specs = new GuitarSpecs(null, model, type, numStrings, null, null);
        } else {
            specs = new GuitarSpecs(builder, model, type, numStrings, null, null);
        }
        List<Guitar> guitars = inventory.search(specs);
        return !guitars.isEmpty();
    }
    
    private static String getAvailableBuilders(Inventory inventory) {
        // Get all guitars and extract unique builders
        GuitarSpecs specs = new GuitarSpecs(null, null, null, 0, null, null);
        List<Guitar> allGuitars = inventory.search(specs);
        return allGuitars.stream()
                .map(g -> g.getSpecs().getBuilder().toString())
                .distinct()
                .collect(Collectors.joining(", "));
    }
    
    private static String getAvailableModelsForBuilder(Inventory inventory, Builder builder) {
        GuitarSpecs specs = new GuitarSpecs(builder, null, null, 0, null, null);
        List<Guitar> guitars = inventory.search(specs);
        return guitars.stream()
                .map(g -> g.getSpecs().getModel())
                .distinct()
                .collect(Collectors.joining(", "));
    }
    
    private static String getAllAvailableModels(Inventory inventory) {
        GuitarSpecs specs = new GuitarSpecs(null, null, null, 0, null, null);
        List<Guitar> allGuitars = inventory.search(specs);
        return allGuitars.stream()
                .map(g -> g.getSpecs().getModel())
                .distinct()
                .collect(Collectors.joining(", "));
    }
    
    private static String getAvailableTypesForBuilderAndModel(Inventory inventory, Builder builder, String model) {
        GuitarSpecs specs = new GuitarSpecs(builder, model, null, 0, null, null);
        List<Guitar> guitars = inventory.search(specs);
        return guitars.stream()
                .map(g -> g.getSpecs().getType().toString())
                .distinct()
                .collect(Collectors.joining(", "));
    }
    
    private static String getAvailableTypesForModel(Inventory inventory, String model) {
        GuitarSpecs specs = new GuitarSpecs(null, model, null, 0, null, null);
        List<Guitar> guitars = inventory.search(specs);
        return guitars.stream()
                .map(g -> g.getSpecs().getType().toString())
                .distinct()
                .collect(Collectors.joining(", "));
    }
    
    private static String getAvailableStringsForSelection(Inventory inventory, Builder builder, String model, Type type) {
        GuitarSpecs specs;
        if (builder.toString().equals("ANY")) {
            specs = new GuitarSpecs(null, model, type, 0, null, null);
        } else {
            specs = new GuitarSpecs(builder, model, type, 0, null, null);
        }
        List<Guitar> guitars = inventory.search(specs);
        return guitars.stream()
                .map(g -> String.valueOf(g.getSpecs().getNumStrings()))
                .distinct()
                .collect(Collectors.joining(", "));
    }

    private static void initializeInventory(Inventory inventory) {
        inventory.addGuitar("11277", 14999.95, Builder.FENDER, "Stratocastor", Type.ELECTRIC, 12, Wood.ALDER, Wood.ALDER);
        inventory.addGuitar("V95693", 15499.95, Builder.FENDER, "Stratocastor", Type.ELECTRIC, 12, Wood.ALDER, Wood.ALDER);
        inventory.addGuitar("70108276", 22999.95, Builder.GIBSON, "SG", Type.ELECTRIC, 12, Wood.MAHOGANY, Wood.MAHOGANY);
        inventory.addGuitar("A10001", 13999.95, Builder.MARTIN, "D-28", Type.ACOUSTIC, 6, Wood.MAPLE, Wood.CEDAR);
        inventory.addGuitar("A10002", 11999.95, Builder.COLLINGS, "OM2H", Type.ACOUSTIC, 6, Wood.CEDAR, Wood.SITKA);
        inventory.addGuitar("A10003", 18999.95, Builder.OLSON, "SJ", Type.ACOUSTIC, 6, Wood.INDIAN_ROSEWOOD, Wood.ADIRONDACK);
        inventory.addGuitar("A10004", 20999.95, Builder.RYAN, "Nightingale", Type.ACOUSTIC, 12, Wood.CEDAR, Wood.COCOBOLO);
        inventory.addGuitar("A10005", 25999.95, Builder.PRS, "Custom 24", Type.ELECTRIC, 6, Wood.MAPLE, Wood.MAHOGANY);
        inventory.addGuitar("A10006", 14949.95, Builder.FENDER, "Telecaster", Type.ELECTRIC, 6, Wood.ALDER, Wood.MAPLE);
        inventory.addGuitar("A10007", 13499.95, Builder.GIBSON, "Les Paul", Type.ELECTRIC, 6, Wood.MAHOGANY, Wood.MAPLE);
    }
}